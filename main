#!/usr/bin/env bash
#
# Arch linux install
set -e

usage() {
  echo "usage: ${0##*/} [-h] -n USERNAME -t TIMEZONE [-l LAYOUT] -f FIRMWARE"
  echo
  echo 'arch linux installer'
  echo
  echo 'options:'
  echo '  -h           show this help message and exit'
  echo '  -n USERNAME  specify username'
  echo '  -t TIMEZONE  specify timezone'
  echo '  -l LAYOUT    specify keyboard layout (en is a default)'
  echo '  -f FIRMWARE  specify a firmware list to install'
  echo
  echo "firmware list example: 'amdgpu realtek'"

  exit "${1}"
}

setup_pacman() {
  local pacmanconf
  pacmanconf='https://raw.githubusercontent.com/nedorazrab0/arch39/main/cfg'
  pacmanconf="${pacmanconf}/etc/pacman.conf"
  curl -f -o /etc/pacman.conf "${pacmanconf}"

  echo '- Waiting for reflector...'
  systemctl start reflector

  pacman-key --init
  pacman-key --populate archlinux
  pacman -Syy archlinux-keyring --needed --noconfirm
}

disk_partition() {
  local blk="${1}"

  echo 'none' > "/sys/block/${blk}/queue/scheduler"
  echo '128' > "/sys/block/${blk}/queue/nr_requests"
  echo '2' > "/sys/block/${blk}/queue/rq_affinity"

  blkid "${blk}"*? && wipefs --all "${blk}"*?
  wipefs --all "${blk}"
  blkdiscard -vf "${blk}"
  sgdisk -Zo \
    -n1::+64M -t1:ef00 -c1:'EFI System Partition' \
    -n2::+ -t2:8304 -c2:'Arch Linux Root' -p "${blk}"

  mkfs.fat -F32 -n 'ESP' -v -S512 --codepage=437 "${blk}"*1
  mkfs.btrfs -fK -L 'archlinux' -O 'block-group-tree' -n65536 --csum xxhash \
    -m single "${blk}"*2

  local btrfs_opts
  btrfs_opts='noatime,nodiscard,nobarrier,commit=300,lazytime,ssd'
  btrfs_opts="${btrfs_opts},compress-force=zstd:3"
  local fat_opts
  fat_opts='noexec,nodev,nosuid,noatime,utf8=false,fmask=0177,dmask=0077'
  fat_opts="${fat_opts},lazytime,X-mount.mkdir=600"

  mount -t btrfs -v -o "${btrfs_opts}" "${blk}"*2 /mnt
  mount -t vfat -v -o  "${fat_opts}" "${blk}"*1 /mnt/boot
}

pkg_strap() {
  local fwlist="${1}"

  local fw
  for fw in ${fwlist}; do
    local fwpkglist="${fwpkglist} linux-firmware-${fw}"
  done

  # NOTE: lib32-mesa, lib32-vulkan-radeon and lib32-vulkan-mesa-layers
  # are important for gamescope!!
  mountpoint -q /var/cache/pacman/pkg && hostcache='-c'
  pacstrap ${hostcache} /mnt base linux-zen booster amd-ucode btrfs-progs \
    xfsprogs exfatprogs dosfstools gptfdisk android-tools git github-cli \
    flatpak zram-generator micro zsh reflector gamescope mandoc less xxhash \
    pigz unzip hyprland polkit xdg-desktop-portal-{gtk,hyprland} mako \
    alacritty openssh openssl grim slurp hypridle hyprlock hyprsunset \
    hyprpicker noto-fonts{,-extra} waybar brightnessctl xdg-user-dirs \
    lib32-vulkan-radeon lib32-mesa lib32-vulkan-mesa-layers bluez{,-utils} \
    iptables-nft pipewire{,-alsa,-pulse,-jack} wpa_supplicant sbctl \
    wl-clipboard wl-clip-persist ${fwpkglist}
}

setup_chroot() {
  local username="${1}"
  local password="${2}"
  local timezone="${3}"
  local layout="${4}"

  mount -o 'bind,ro' -v /tmp/arch39 /mnt/mnt
  arch-chroot /mnt bash /mnt/inchroot -n "${username}" -p "${password}" \
    -t "${timezone}" -l "${layout}"
  umount -v /mnt/mnt
}

end() {
  echo '- Wonderhoy! ^^'
  sleep 2
  umount -vR /mnt
  systemctl poweroff
}

main() {
  local OPTARG
  local arg

  # Parse args
  ((${#} == 0)) && usage 1 >&2
  while getopts 'hn:t:l:b:f:' arg; do
    case "${arg}" in
      n) local username="${OPTARG}" ;;
      t) local timezone="${OPTARG}" ;;
      l) local layout="${OPTARG}" ;;
      b) local blk="${OPTARG}" ;;
      f) local fwlist="${OPTARG}" ;;
      h) usage 0 ;;
      *) usage 1 >&2 ;;
    esac
  done

  echo '- Password:'
  stty -echo  # Do not expose the password
  local password
  read -r password
  stty echo

  setup_pacman
  disk_partition "${blk}"
  pkg_strap
  setup_choot "${username}" "${password}" "${timezone}" "${layout}"
  end
}

main "${@}"
